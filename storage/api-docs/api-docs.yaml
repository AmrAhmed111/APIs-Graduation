openapi: 3.0.0
info:
  title: APIs-Graduation
  version: 1.0.0
paths:
  /api/appointments/book:
    post:
      tags:
        - Appointments
      summary: 'Book an appointment for a patient with a doctor'
      operationId: 4ff3433a791cae09b5aa09c654c4d2e3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                doc_id:
                  description: 'ID of the doctor'
                  type: integer
                  example: 1
                appoint_time:
                  description: 'Appointment time in 24-hour format (H:i)'
                  type: string
                  example: '14:00'
                appoint_date:
                  description: 'Appointment date in Y-m-d format'
                  type: string
                  format: date
                  example: '2025-07-10'
              type: object
      responses:
        200:
          description: 'Appointment booked successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment:
                    properties:
                      id:
                        type: integer
                        example: 1
                      pat_id:
                        type: integer
                        example: 1
                      doc_id:
                        type: integer
                        example: 1
                      appoint_time:
                        type: string
                        example: '14:00'
                      appoint_date:
                        type: string
                        example: '2025-07-10'
                    type: object
                  message:
                    type: string
                    example: 'Appointment booked successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid input or time not available'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Selected time is not available in the doctor's schedule."
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'Doctor or schedule not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor information not found.'
                  status:
                    type: integer
                    example: 404
                type: object
        409:
          description: 'Appointment slot already booked'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'This appointment slot is already booked.'
                  status:
                    type: integer
                    example: 409
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Validation failed'
                  status:
                    type: integer
                    example: 422
                  errors:
                    type: object
                type: object
      security:
        -
          bearerAuth: []
  '/api/appointments/cancel/{appointmentId}':
    delete:
      tags:
        - Appointments
      summary: 'Cancel an appointment'
      operationId: 1cbc852cb8d66ae51e695c53061c91a1
      parameters:
        -
          name: appointmentId
          in: path
          description: 'ID of the appointment to cancel'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Appointment cancelled successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Appointment cancelled successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Cannot cancel a past appointment'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Cannot cancel a past appointment.'
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You do not have permission to cancel this appointment.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Appointment not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Appointment not found.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  '/api/appointments/doctors/available/{docId}':
    get:
      tags:
        - Appointments
      summary: 'Get available appointments for a doctor on a specific date'
      operationId: cd9b9e5221218a4bf00345066a5338e3
      parameters:
        -
          name: docId
          in: path
          description: 'ID of the doctor'
          required: true
          schema:
            type: integer
        -
          name: date
          in: query
          description: 'Date to check available appointments (Y-m-d format, defaults to today)'
          required: false
          schema:
            type: string
            format: date
            example: '2025-07-10'
      responses:
        200:
          description: 'Available appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  available_appointments:
                    type: array
                    items:
                      type: string
                      example: '14:00'
                  date:
                    type: string
                    example: '2025-07-10'
                  message:
                    type: string
                    example: 'Available appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid date or no schedule available'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No available schedule for Wednesday.'
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'Doctor or schedule not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor not found.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/appointments/upcoming:
    get:
      tags:
        - Appointments
      summary: 'Retrieve upcoming appointments for the authenticated patient'
      operationId: d692de6487dfcf600c14c473fa606a85
      responses:
        200:
          description: 'Upcoming appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment_details:
                    type: array
                    items:
                      properties:
                        appointment_id:
                          type: integer
                          example: 1
                        doctor_image:
                          type: string
                          example: 'http://your-app-url/storage/doctor_images/doctor.jpg'
                          nullable: true
                        doctor_name:
                          type: string
                          example: 'John Doe'
                        specialization:
                          type: string
                          example: Cardiology
                          nullable: true
                        appointment_date:
                          type: string
                          example: '2025-07-10'
                        appointment_time:
                          type: string
                          example: '14:00'
                      type: object
                  message:
                    type: string
                    example: 'Upcoming appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'No appointments found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No upcoming appointments found for this patient.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/appointments/canceled:
    get:
      tags:
        - Appointments
      summary: 'Retrieve canceled appointments for the authenticated patient'
      operationId: 7aeaf6bb8101bddb73ec2e2613404d84
      responses:
        200:
          description: 'Canceled appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment_details:
                    type: array
                    items:
                      properties:
                        appointment_id:
                          type: integer
                          example: 1
                        doctor_image:
                          type: string
                          example: 'http://your-app-url/storage/doctor_images/doctor.jpg'
                          nullable: true
                        doctor_name:
                          type: string
                          example: 'John Doe'
                        specialization:
                          type: string
                          example: Cardiology
                          nullable: true
                        appointment_date:
                          type: string
                          example: '2025-07-10'
                        appointment_time:
                          type: string
                          example: '14:00'
                      type: object
                  message:
                    type: string
                    example: 'Canceled appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'No canceled appointments found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No canceled appointments found for this patient.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/doctors-group/register:
    post:
      tags:
        - 'Doctor Authentication'
      summary: 'Register a new doctor'
      operationId: b7823451ce89d57c4db5ce26faff60d5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                firstName:
                  description: 'First name of the doctor'
                  type: string
                  example: John
                lastName:
                  description: 'Last name of the doctor'
                  type: string
                  example: Doe
                email:
                  description: "Doctor's email"
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  description: "Doctor's password"
                  type: string
                  example: password123
                spec_id:
                  description: 'Specialization ID of the doctor'
                  type: integer
                  example: 1
              type: object
      responses:
        201:
          description: 'Doctor registered successfully'
          content:
            application/json:
              schema:
                properties:
                  doctor:
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      spec_id:
                        type: integer
                        example: 1
                    type: object
                  message:
                    type: string
                    example: 'Doctor registered successfully'
                  status:
                    type: integer
                    example: 201
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to register doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
  /api/doctors-group/login:
    post:
      tags:
        - 'Doctor Authentication'
      summary: 'Login a doctor'
      operationId: f49431a22716fb487d0324429ec651c5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  description: "Doctor's email"
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  description: "Doctor's password"
                  type: string
                  example: password123
              type: object
      responses:
        200:
          description: 'Login successful'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  status:
                    type: integer
                    example: 200
                  token:
                    description: 'Sanctum authentication token'
                    type: string
                    example: 1|randomtokenstring
                type: object
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The email is incorrect. Please verify that this email is correct.'
                  errors:
                    type: object
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                type: object
  /api/doctors-group/doctor/logout:
    post:
      tags:
        - 'Doctor Authentication'
      summary: 'Logout a doctor'
      operationId: 26b0bb0561587874ce986848ae63b8bb
      responses:
        200:
          description: 'Doctor logged out successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor logged out successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to logout here..'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/doctors-group/doctors:
    get:
      tags:
        - Doctors
      summary: 'List all doctors'
      operationId: 3f854ee37d006d486c37c2a3483967bd
      responses:
        200:
          description: 'Successfully retrieved all doctors'
          content:
            application/json:
              schema:
                properties:
                  doctors:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        firstName:
                          type: string
                          example: John
                        lastName:
                          type: string
                          example: Doe
                        phoneNumber:
                          type: string
                          example: '+1234567890'
                        rating:
                          type: number
                          format: float
                          example: 4.5
                        image:
                          properties:
                            id:
                              type: integer
                              example: 1
                            doctor_id:
                              type: integer
                              example: 1
                            image_name:
                              type: string
                              example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                          type: object
                          nullable: true
                        information:
                          properties:
                            about:
                              type: string
                              example: 'Experienced cardiologist'
                            experience:
                              type: integer
                              example: 10
                            number_of_patients:
                              type: integer
                              example: 500
                            schedule:
                              $ref: '#/components/schemas/DoctorSchedule'
                            salary:
                              type: number
                              example: 5000
                          type: object
                          nullable: true
                        specialization_name:
                          type: string
                          example: Cardiology
                          nullable: true
                        city_name:
                          type: string
                          example: 'New York'
                          nullable: true
                        user_role:
                          type: string
                          example: doctor
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Successfully retrieved all doctors'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to view doctors list.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Doctors
      summary: 'Store a new doctor'
      operationId: d90077e2ae948974d643c7bcafb5ea3e
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                firstName:
                  description: 'First name of the doctor'
                  type: string
                  example: John
                lastName:
                  description: 'Last name of the doctor'
                  type: string
                  example: Doe
                username:
                  description: 'Unique username of the doctor'
                  type: string
                  example: johndoe
                email:
                  description: "Doctor's email"
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  description: "Doctor's password"
                  type: string
                  example: Password123!
                gender:
                  description: "Doctor's gender"
                  type: string
                  enum:
                    - male
                    - female
                  example: male
                phoneNumber:
                  description: "Doctor's phone number"
                  type: string
                  example: '+1234567890'
                rating:
                  description: "Doctor's rating"
                  type: number
                  example: 4.5
                spec_id:
                  description: 'Specialization ID'
                  type: integer
                  example: 1
                city_id:
                  description: 'City ID'
                  type: integer
                  example: 1
                image:
                  description: "Doctor's profile image (PNG, JPG, JPEG, GIF, max 2MB)"
                  type: file
                experience:
                  description: 'Years of experience'
                  type: integer
                  example: 10
                number_of_patients:
                  description: 'Number of patients treated'
                  type: integer
                  example: 500
                about:
                  description: 'About the doctor'
                  type: string
                  example: 'Experienced cardiologist'
                schedule:
                  $ref: '#/components/schemas/DoctorSchedule'
                salary:
                  description: "Doctor's salary"
                  type: number
                  example: 5000
              type: object
      responses:
        201:
          description: 'Doctor registered successfully'
          content:
            application/json:
              schema:
                properties:
                  doctor:
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      image:
                        properties:
                          image_name:
                            type: string
                            example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                        type: object
                        nullable: true
                      information:
                        properties:
                          about:
                            type: string
                            example: 'Experienced cardiologist'
                          experience:
                            type: integer
                            example: 10
                          number_of_patients:
                            type: integer
                            example: 500
                          schedule:
                            $ref: '#/components/schemas/DoctorSchedule'
                          salary:
                            type: number
                            example: 5000
                        type: object
                        nullable: true
                      specialization_name:
                        type: string
                        example: Cardiology
                        nullable: true
                      city_name:
                        type: string
                        example: 'New York'
                        nullable: true
                      user_role:
                        type: string
                        example: doctor
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'You have been registered successfully'
                  status:
                    type: integer
                    example: 201
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to add doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/doctors-group/doctors/{id}':
    get:
      tags:
        - Doctors
      summary: 'Display a specific doctor (for doctors)'
      operationId: b082e6e9aa354d4dc8e39d26d01844e4
      parameters:
        -
          name: id
          in: path
          description: 'ID of the doctor'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Doctor found'
          content:
            application/json:
              schema:
                properties:
                  doctor:
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      image:
                        properties:
                          image_name:
                            type: string
                            example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                        type: object
                        nullable: true
                      information:
                        properties:
                          about:
                            type: string
                            example: 'Experienced cardiologist'
                          experience:
                            type: integer
                            example: 10
                          number_of_patients:
                            type: integer
                            example: 500
                          schedule:
                            $ref: '#/components/schemas/DoctorSchedule'
                          salary:
                            type: number
                            example: 5000
                        type: object
                        nullable: true
                      specialization_name:
                        type: string
                        example: Cardiology
                        nullable: true
                      city_name:
                        type: string
                        example: 'New York'
                        nullable: true
                      user_role:
                        type: string
                        example: doctor
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Doctor found'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema: []
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to view this doctor.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Doctor not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Doctors
      summary: 'Delete a doctor'
      operationId: 6327dc74bf011eba4600d80971dffd1c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the doctor to delete'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Doctor archived successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor deleted successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to delete this doctor.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Doctor not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  '/api/doctors-group/doctors/update/{id}':
    post:
      tags:
        - Doctors
      summary: "Update a doctor's information"
      operationId: 4b4df08b46a7df248790dad1f65dbb3c
      parameters:
        -
          name: id
          in: path
          description: 'ID of the doctor to update'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                firstName:
                  description: 'First name of the doctor'
                  type: string
                  example: John
                lastName:
                  description: 'Last name of the doctor'
                  type: string
                  example: Doe
                username:
                  description: 'Unique username'
                  type: string
                  example: johndoe
                email:
                  description: 'Email address'
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  description: 'Password (min 8 chars, with upper, lower, number, special char)'
                  type: string
                  example: Password123!
                gender:
                  description: Gender
                  type: string
                  enum:
                    - male
                    - female
                  example: male
                phoneNumber:
                  description: 'Phone number (7-11 digits)'
                  type: string
                  example: '+1234567890'
                rating:
                  description: 'Rating (0-5, owner only)'
                  type: number
                  example: 4.5
                spec_id:
                  description: 'Specialization ID'
                  type: integer
                  example: 1
                city_id:
                  description: 'City ID'
                  type: integer
                  example: 1
                image:
                  description: 'Profile image (PNG, JPG, JPEG, GIF, max 2MB)'
                  type: file
                experience:
                  description: 'Years of experience (owner only)'
                  type: integer
                  example: 10
                number_of_patients:
                  description: 'Number of patients (owner only)'
                  type: integer
                  example: 500
                about:
                  description: 'About the doctor (owner only)'
                  type: string
                  example: 'Experienced cardiologist'
                salary:
                  description: 'Salary (owner only)'
                  type: number
                  example: 5000
                schedule:
                  $ref: '#/components/schemas/DoctorSchedule'
              type: object
      responses:
        200:
          description: 'Doctor updated successfully'
          content:
            application/json:
              schema:
                properties:
                  doctor:
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      image:
                        properties:
                          image_name:
                            type: string
                            example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                        type: object
                        nullable: true
                      information:
                        properties:
                          about:
                            type: string
                            example: 'Experienced cardiologist'
                          experience:
                            type: integer
                            example: 10
                          number_of_patients:
                            type: integer
                            example: 500
                          schedule:
                            $ref: '#/components/schemas/DoctorSchedule'
                          salary:
                            type: number
                            example: 5000
                        type: object
                        nullable: true
                      specialization_name:
                        type: string
                        example: Cardiology
                        nullable: true
                      city_name:
                        type: string
                        example: 'New York'
                        nullable: true
                      user_role:
                        type: string
                        example: doctor
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'The doctor has been updated successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid image file'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Invalid image file uploaded.'
                  status:
                    type: integer
                    example: 400
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to update this doctor.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Doctor not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor not found'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/doctors-group/doctors/restore/{id}':
    post:
      tags:
        - Doctors
      summary: 'Restore a doctor from archive'
      operationId: 918386268e41a5d6d4f480828b882417
      parameters:
        -
          name: id
          in: path
          description: 'ID of the archived doctor to restore'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Doctor restored successfully'
          content:
            application/json:
              schema:
                properties:
                  doctor:
                    properties:
                      id:
                        type: integer
                        example: 1
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      image:
                        properties:
                          image_name:
                            type: string
                            example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                        type: object
                        nullable: true
                      information:
                        properties:
                          about:
                            type: string
                            example: 'Experienced cardiologist'
                          experience:
                            type: integer
                            example: 10
                          number_of_patients:
                            type: integer
                            example: 500
                          schedule:
                            $ref: '#/components/schemas/DoctorSchedule'
                          salary:
                            type: number
                            example: 5000
                        type: object
                        nullable: true
                      specialization_name:
                        type: string
                        example: Cardiology
                        nullable: true
                      city_name:
                        type: string
                        example: 'New York'
                        nullable: true
                      user_role:
                        type: string
                        example: doctor
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Doctor restored successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to restore doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Archived doctor not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Archived doctor not found'
                  status:
                    type: integer
                    example: 404
                type: object
        500:
          description: 'Failed to restore doctor'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Failed to restore doctor: [error message]'
                  status:
                    type: integer
                    example: 500
                type: object
      security:
        -
          bearerAuth: []
  '/api/doctors-group/doctors/delete/archive/{id}':
    delete:
      tags:
        - Doctors
      summary: 'Delete archived doctor data'
      operationId: a75eae47e1a5f38e70ae99790029a3ca
      parameters:
        -
          name: id
          in: path
          description: 'ID of the archived doctor to delete'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Archived doctor data deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Archived data for doctor ID 1 deleted successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        404:
          description: 'Archived doctor not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Archived doctor not found'
                  status:
                    type: integer
                    example: 404
                type: object
        500:
          description: 'Failed to delete archived data'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Failed to delete archived data: [error message]'
                  status:
                    type: integer
                    example: 500
                type: object
      security:
        -
          bearerAuth: []
  /api/doctors-group/top-doctors:
    get:
      tags:
        - Doctors
      summary: 'Get top 10 doctors based on rating'
      operationId: 4a731d0d4e40d8229add4bad38a2b3dc
      responses:
        200:
          description: 'Top 10 doctors retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  doctors:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        firstName:
                          type: string
                          example: John
                        lastName:
                          type: string
                          example: Doe
                        rating:
                          type: number
                          example: 4.5
                        image:
                          properties:
                            image_name:
                              type: string
                              example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                          type: object
                          nullable: true
                        specialization_name:
                          type: string
                          example: Cardiology
                          nullable: true
                        city_name:
                          type: string
                          example: 'New York'
                          nullable: true
                        user_role:
                          type: string
                          example: doctor
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Top 10 doctors retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
                  status:
                    type: integer
                    example: 401
                type: object
      security:
        -
          bearerAuth: []
  /api/search/doctors/search:
    get:
      tags:
        - 'Search For A Doctor'
      summary: 'Search for doctors by name or specialization'
      operationId: f5288f5ae4cbd5c1f0cc80d931ba11af
      parameters:
        -
          name: query
          in: query
          description: 'Search query for doctor first name or specialization name'
          required: true
          schema:
            type: string
            example: Cardiology
      responses:
        200:
          description: 'Doctors retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  doctors:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        first_name:
                          type: string
                          example: John
                        last_name:
                          type: string
                          example: Doe
                        full_name:
                          type: string
                          example: 'John Doe'
                        specialization:
                          type: string
                          example: Cardiology
                          nullable: true
                        experience:
                          type: integer
                          example: 10
                          nullable: true
                        rating:
                          type: number
                          format: float
                          example: 4.5
                        about:
                          type: string
                          example: 'Experienced cardiologist'
                          nullable: true
                        salary:
                          type: number
                          example: 5000
                          nullable: true
                        schedule:
                          $ref: '#/components/schemas/DoctorSchedule'
                        image_name:
                          type: string
                          example: 'http://your-app-url/storage/images/doctor_img/doctor.jpg'
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Doctors retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to search doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'No doctors found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No doctor found with this name'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test-appointments/appoint:
    post:
      tags:
        - 'Medical Test Appointments'
      summary: 'Appoint a medical test for a patient'
      operationId: dd8e7b9fbfcec7de9526c5a0b83d695c
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - test_id
                - doc_id
                - appoint_time
                - appoint_date
              properties:
                test_id:
                  description: 'ID of the medical test'
                  type: integer
                  example: 1
                doc_id:
                  description: 'ID of the doctor'
                  type: integer
                  example: 1
                appoint_time:
                  description: 'Appointment time in 24-hour format (H:i)'
                  type: string
                  format: time
                  example: '14:00'
                appoint_date:
                  description: 'Appointment date in Y-m-d format'
                  type: string
                  format: date
                  example: '2025-07-10'
              type: object
      responses:
        200:
          description: 'Medical test appointed successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment:
                    properties:
                      id:
                        type: integer
                        example: 1
                      pat_id:
                        type: integer
                        example: 1
                      test_id:
                        type: integer
                        example: 1
                      doc_id:
                        type: integer
                        example: 1
                      appoint_time:
                        type: string
                        example: '14:00'
                      appoint_date:
                        type: string
                        example: '2025-07-10'
                      medicalTest:
                        properties:
                          id:
                            type: integer
                            example: 1
                          test_name:
                            type: string
                            example: 'Blood Test'
                        type: object
                      doctor:
                        properties:
                          id:
                            type: integer
                            example: 1
                          firstName:
                            type: string
                            example: John
                          lastName:
                            type: string
                            example: Doe
                        type: object
                    type: object
                  message:
                    type: string
                    example: 'Medical test appointed successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid request data'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Cannot appoint a medical test in the past.'
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Medical test or schedule not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test schedule not found.'
                  status:
                    type: integer
                    example: 404
                type: object
        409:
          description: 'Appointment slot already taken'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'This appointment slot is already taken.'
                  status:
                    type: integer
                    example: 409
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Validation failed'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test-appointments/cancel/{appointmentId}':
    delete:
      tags:
        - 'Medical Test Appointments'
      summary: 'Cancel a medical test appointment'
      operationId: d84e162684a2bc91b3b9ff770e48f21f
      parameters:
        -
          name: appointmentId
          in: path
          description: 'ID of the medical test appointment to cancel'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Medical test appointment cancelled successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test appointment cancelled successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You do not have permission to cancel this appointment.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Appointment not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Appointment not found.'
                  status:
                    type: integer
                    example: 404
                type: object
        400:
          description: 'Cannot cancel past appointment'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Cannot cancel a past appointment.'
                  status:
                    type: integer
                    example: 400
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test-appointments/tests/available/{testId}':
    get:
      tags:
        - 'Medical Test Appointments'
      summary: 'Get available appointments for a medical test on a specific date'
      operationId: 2cb63de0b490eac07244e7909439934b
      parameters:
        -
          name: testId
          in: path
          description: 'ID of the medical test'
          required: true
          schema:
            type: integer
        -
          name: date
          in: query
          description: 'Date to check available appointments (defaults to today)'
          required: false
          schema:
            type: string
            format: date
            example: '2025-07-10'
      responses:
        200:
          description: 'Available appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  available_appointments:
                    type: array
                    items:
                      type: string
                      example: '14:00'
                  date:
                    type: string
                    format: date
                    example: '2025-07-10'
                  message:
                    type: string
                    example: 'Available appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid date or no valid times'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Cannot retrieve appointments for past dates.'
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Medical test or schedule not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test not found.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test-appointments/upcoming:
    get:
      tags:
        - 'Medical Test Appointments'
      summary: 'Retrieve upcoming medical test appointments for the authenticated patient'
      operationId: a3ebba47004e43e489179269a610d5cc
      responses:
        200:
          description: 'Upcoming medical test appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment_details:
                    type: array
                    items:
                      properties:
                        appointment_id:
                          type: integer
                          example: 1
                        test_name:
                          type: string
                          example: 'Blood Test'
                        appointment_date:
                          type: string
                          format: date
                          example: '2025-07-10'
                        appointment_time:
                          type: string
                          example: '14:00'
                      type: object
                  message:
                    type: string
                    example: 'Upcoming medical test appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'No upcoming appointments found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No upcoming medical test appointments found for this patient.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test-appointments/canceled:
    get:
      tags:
        - 'Medical Test Appointments'
      summary: 'Retrieve canceled medical test appointments for the authenticated patient'
      operationId: e263dc2bac8496ecc38e3272f2c2d954
      responses:
        200:
          description: 'Canceled medical test appointments retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  appointment_details:
                    type: array
                    items:
                      properties:
                        appointment_id:
                          type: integer
                          example: 1
                        test_name:
                          type: string
                          example: 'Blood Test'
                        appointment_date:
                          type: string
                          format: date
                          example: '2025-07-10'
                        appointment_time:
                          type: string
                          example: '14:00'
                      type: object
                  message:
                    type: string
                    example: 'Canceled medical test appointments retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthenticated. Please log in.'
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'No canceled appointments found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No canceled medical test appointments found for this patient.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test/medical-tests:
    get:
      tags:
        - 'Medical Tests'
      summary: 'Get all medical tests'
      operationId: 3327fd32528d4dcdd3346c93d54c7bb1
      responses:
        200:
          description: 'Medical tests retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        test_name:
                          type: string
                          example: 'Blood Test'
                        description:
                          type: string
                          example: 'A test to analyze blood components'
                          nullable: true
                        schedule:
                          oneOf:
                            -
                              $ref: '#/components/schemas/DoctorSchedule'
                          nullable: true
                        cost:
                          type: number
                          format: float
                          example: 50
                      type: object
                  message:
                    type: string
                    example: 'Medical tests retrieved successfully.'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only doctors or patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test/create/medical-test:
    post:
      tags:
        - 'Medical Tests'
      summary: 'Create a new medical test'
      operationId: 6258682d755b482d79d0f27640b223d9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - test_name
                - cost
              properties:
                test_name:
                  description: 'Name of the medical test'
                  type: string
                  example: 'Blood Test'
                description:
                  description: 'Description of the medical test'
                  type: string
                  example: 'A test to analyze blood components'
                  nullable: true
                schedule:
                  oneOf:
                    -
                      $ref: '#/components/schemas/DoctorSchedule'
                  nullable: true
                  description: 'Schedule in JSON format'
                cost:
                  description: 'Cost of the medical test'
                  type: number
                  format: float
                  example: 50
              type: object
      responses:
        201:
          description: 'Medical test created successfully'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        type: integer
                        example: 1
                      test_name:
                        type: string
                        example: 'Blood Test'
                      description:
                        type: string
                        example: 'A test to analyze blood components'
                        nullable: true
                      schedule:
                        oneOf:
                          -
                            $ref: '#/components/schemas/DoctorSchedule'
                        nullable: true
                      cost:
                        type: number
                        format: float
                        example: 50
                    type: object
                  message:
                    type: string
                    example: 'Medical test created successfully.'
                  status:
                    type: integer
                    example: 201
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Validation error.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test/medical-test/view/{id}':
    get:
      tags:
        - 'Medical Tests'
      summary: 'Get a specific medical test'
      operationId: 897942a24504bbae8c792e911dfb0f3a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the medical test'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Medical test retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        type: integer
                        example: 1
                      test_name:
                        type: string
                        example: 'Blood Test'
                      description:
                        type: string
                        example: 'A test to analyze blood components'
                        nullable: true
                      schedule:
                        oneOf:
                          -
                            $ref: '#/components/schemas/DoctorSchedule'
                        nullable: true
                      cost:
                        type: number
                        format: float
                        example: 50
                    type: object
                  message:
                    type: string
                    example: 'Medical test retrieved successfully.'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Medical test not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test not found.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test/medical-test/update/{id}':
    put:
      tags:
        - 'Medical Tests'
      summary: 'Update a specific medical test'
      operationId: c30cb7022f77bd807592cc8a76306c76
      parameters:
        -
          name: id
          in: path
          description: 'ID of the medical test'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                test_name:
                  description: 'Name of the medical test'
                  type: string
                  example: 'Blood Test'
                description:
                  description: 'Description of the medical test'
                  type: string
                  example: 'A test to analyze blood components'
                  nullable: true
                schedule:
                  oneOf:
                    -
                      $ref: '#/components/schemas/DoctorSchedule'
                  nullable: true
                  description: 'Schedule in JSON format'
                cost:
                  description: 'Cost of the medical test'
                  type: number
                  format: float
                  example: 50
              type: object
      responses:
        200:
          description: 'Medical test updated successfully'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      id:
                        type: integer
                        example: 1
                      test_name:
                        type: string
                        example: 'Blood Test'
                      description:
                        type: string
                        example: 'A test to analyze blood components'
                        nullable: true
                      schedule:
                        oneOf:
                          -
                            $ref: '#/components/schemas/DoctorSchedule'
                        nullable: true
                      cost:
                        type: number
                        format: float
                        example: 50
                    type: object
                  message:
                    type: string
                    example: 'Medical test updated successfully.'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'Medical test not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test not found.'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Validation error.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test/medical-test/delete/{id}':
    delete:
      tags:
        - 'Medical Tests'
      summary: 'Delete a specific medical test'
      operationId: 26404e528673316c911d7c5ec5c86d3a
      parameters:
        -
          name: id
          in: path
          description: 'ID of the medical test'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Medical test deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test deleted successfully.'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        404:
          description: 'Medical test not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test not found.'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/medical-test-results/upload:
    post:
      tags:
        - 'Medical Test Results'
      summary: 'Upload a medical test result and notify patient and doctor'
      operationId: af406694ad23d79a401dce34b4e2aa5a
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - appointment_id
                - result_file
              properties:
                appointment_id:
                  description: 'ID of the medical test appointment'
                  type: integer
                  example: 1
                result_file:
                  description: 'PDF file of the test result (max 2MB)'
                  type: file
                  format: binary
                notes:
                  description: 'Optional notes about the test result (max 1000 characters)'
                  type: string
                  example: 'Normal results'
                  nullable: true
              type: object
      responses:
        200:
          description: 'Test result uploaded and notifications sent successfully'
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      id:
                        type: integer
                        example: 1
                      appointment_id:
                        type: integer
                        example: 1
                      pat_id:
                        type: integer
                        example: 1
                      doc_id:
                        type: integer
                        example: 1
                      result_file:
                        type: string
                        example: medical_results/result_123.pdf
                      notes:
                        type: string
                        example: 'Normal results'
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Test result uploaded and notifications sent successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only doctors or moderators can upload results.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Medical test appointment not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test appointment not found'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Validation failed'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/medical-test-results/download/{resultId}':
    get:
      tags:
        - 'Medical Test Results'
      summary: 'Download or view a medical test result PDF'
      operationId: 595819162bb22cbc6f3025766dd935d9
      parameters:
        -
          name: resultId
          in: path
          description: 'ID of the medical test result'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Medical test result file'
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. You can only download your own test results.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Medical test result or file not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Medical test result not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/search/medical-tests/search:
    get:
      tags:
        - 'Search For Medical Tests'
      summary: 'Search for medical tests by name'
      operationId: 1c979814d1cda29cbd55845a6e793f16
      parameters:
        -
          name: query
          in: query
          description: 'Search query for medical test name'
          required: true
          schema:
            type: string
            example: 'Blood Test'
      responses:
        200:
          description: 'Medical tests retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  tests:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        test_name:
                          type: string
                          example: 'Blood Test'
                        cost:
                          type: number
                          format: float
                          example: 50
                          nullable: true
                        description:
                          type: string
                          example: 'A test to analyze blood components'
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Medical tests retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can perform this action.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'No medical tests found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No medical test found with this name'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The query field is required.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/patient/login:
    post:
      tags:
        - 'Patient Authentication'
      summary: 'Log in a patient'
      operationId: 06a2023b9b7548701ede2443f0d09239
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  description: "Patient's email address"
                  type: string
                  format: email
                  example: patient@example.com
                password:
                  description: "Patient's password"
                  type: string
                  example: password123
              type: object
      responses:
        200:
          description: 'Login successful'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  status:
                    type: integer
                    example: 200
                  token:
                    description: 'Sanctum authentication token'
                    type: string
                    example: 1|abc123xyz
                type: object
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The email is incorrect. Please verify that this email is correct.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Doctors cannot log in as patients.'
                  status:
                    type: integer
                    example: 403
                type: object
  /api/patient-group/patient/logout:
    post:
      tags:
        - 'Patient Authentication'
      summary: 'Log out a patient and deactivate their account'
      operationId: 4d9fa060124540111fa7339d5b619f28
      responses:
        200:
          description: 'Logged out and account deactivated successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Logged out and account deactivated successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to logout here.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/patients:
    get:
      tags:
        - Patients
      summary: 'Get all patients'
      operationId: 09cfab863f81f37d27263f387a936adc
      responses:
        200:
          description: 'Successfully retrieved all patients'
          content:
            application/json:
              schema:
                properties:
                  patients:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        fullName:
                          type: string
                          example: 'John Doe'
                        email:
                          type: string
                          format: email
                          example: patient@example.com
                        gender:
                          type: string
                          example: male
                          nullable: true
                        phoneNumber:
                          type: string
                          example: '+1234567890'
                          nullable: true
                        address:
                          type: string
                          example: '123 Main St'
                          nullable: true
                        image:
                          properties:
                            id:
                              type: integer
                              example: 1
                            image_name:
                              type: string
                              example: 'http://example.com/storage/images/patient_img/patient_1.jpg'
                          type: object
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Successfully retrieved all patients'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to view patients list'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/patient/register:
    post:
      tags:
        - Patients
      summary: 'Register a new patient'
      operationId: 8195fa2d2a7b0df6e0e42a70ea046015
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - fullName
                - email
                - password
                - DateofBirth
              properties:
                fullName:
                  description: 'Full name of the patient'
                  type: string
                  example: 'John Doe'
                email:
                  description: "Patient's email address"
                  type: string
                  format: email
                  example: patient@example.com
                password:
                  description: 'Password (min 8 characters, must include uppercase, lowercase, number, and special character)'
                  type: string
                  example: Password123!
                DateofBirth:
                  description: "Patient's date of birth"
                  type: string
                  format: date
                  example: '1990-01-01'
                gender:
                  description: "Patient's gender (male, female, other)"
                  type: string
                  example: male
                  nullable: true
                phoneNumber:
                  description: "Patient's phone number (7 to 11 digits)"
                  type: string
                  example: '+1234567890'
                  nullable: true
                address:
                  description: "Patient's address"
                  type: string
                  example: '123 Main St'
                  nullable: true
                image:
                  description: 'Profile image (png, jpg, jpeg, gif, max 2MB)'
                  type: file
                  format: binary
              type: object
      responses:
        201:
          description: 'Patient registered successfully'
          content:
            application/json:
              schema:
                properties:
                  patient:
                    properties:
                      id:
                        type: integer
                        example: 1
                      fullName:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: patient@example.com
                      gender:
                        type: string
                        example: male
                        nullable: true
                      phoneNumber:
                        type: string
                        example: '+1234567890'
                        nullable: true
                      address:
                        type: string
                        example: '123 Main St'
                        nullable: true
                      image:
                        properties:
                          id:
                            type: integer
                            example: 1
                          image_name:
                            type: string
                            example: 'http://example.com/storage/images/patient_img/patient_1.jpg'
                        type: object
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'You have been registered successfully'
                  status:
                    type: integer
                    example: 201
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only unauthenticated users can register.'
                  status:
                    type: integer
                    example: 403
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
  '/api/patient-group/patients/{id}':
    get:
      tags:
        - Patients
      summary: 'Get a specific patient'
      operationId: 1a9d05897c36a6966aa2e5ac9f170ed5
      parameters:
        -
          name: id
          in: path
          description: 'ID of the patient'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successfully retrieved patient'
          content:
            application/json:
              schema:
                properties:
                  patient:
                    properties:
                      id:
                        type: integer
                        example: 1
                      fullName:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: patient@example.com
                      gender:
                        type: string
                        example: male
                        nullable: true
                      phoneNumber:
                        type: string
                        example: '+1234567890'
                        nullable: true
                      address:
                        type: string
                        example: '123 Main St'
                        nullable: true
                      image:
                        properties:
                          id:
                            type: integer
                            example: 1
                          image_name:
                            type: string
                            example: 'http://example.com/storage/images/patient_img/patient_1.jpg'
                        type: object
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Successfully retrieved patient'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to view this patient.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Patient not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Patient not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  '/api/patient-group/patient/update/{id}':
    post:
      tags:
        - Patients
      summary: 'Update a specific patient'
      operationId: 17b3a1a25c7392585c6a87f36ef4c6ae
      parameters:
        -
          name: id
          in: path
          description: 'ID of the patient'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                fullName:
                  description: 'Full name of the patient'
                  type: string
                  example: 'John Doe'
                password:
                  description: 'Password (min 8 characters, must include uppercase, lowercase, number, and special character)'
                  type: string
                  example: Password123!
                gender:
                  description: "Patient's gender (male, female, other)"
                  type: string
                  example: male
                  nullable: true
                phoneNumber:
                  description: "Patient's phone number (7 to 11 digits)"
                  type: string
                  example: '+1234567890'
                  nullable: true
                address:
                  description: "Patient's address"
                  type: string
                  example: '123 Main St'
                  nullable: true
                image:
                  description: 'Profile image (png, jpg, jpeg, gif, max 2MB)'
                  type: file
                  format: binary
              type: object
      responses:
        200:
          description: 'Patient updated successfully'
          content:
            application/json:
              schema:
                properties:
                  patient:
                    properties:
                      id:
                        type: integer
                        example: 1
                      fullName:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: patient@example.com
                      gender:
                        type: string
                        example: male
                        nullable: true
                      phoneNumber:
                        type: string
                        example: '+1234567890'
                        nullable: true
                      address:
                        type: string
                        example: '123 Main St'
                        nullable: true
                      image:
                        properties:
                          id:
                            type: integer
                            example: 1
                          image_name:
                            type: string
                            example: 'http://example.com/storage/images/patient_img/patient_1.jpg'
                        type: object
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Patient updated successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        400:
          description: 'Invalid image file'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Invalid image file uploaded. Please check file type or size.'
                  status:
                    type: integer
                    example: 400
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action or restricted fields'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to update email.'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'Patient not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Patient not found'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Failed to store the image. Check folder permissions or disk space.'
                  status:
                    type: integer
                    example: 500
                type: object
      security:
        -
          bearerAuth: []
  '/api/patient-group/patient/destroy/{id}':
    delete:
      tags:
        - Patients
      summary: 'Attempt to permanently delete a patient'
      operationId: e4c0313c17b3362d371fe2c51c7bca1f
      parameters:
        -
          name: id
          in: path
          description: 'ID of the patient'
          required: true
          schema:
            type: string
      responses:
        403:
          description: 'Permanent deletion not allowed'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Permanent deletion of patient accounts is not allowed.'
                  status:
                    type: integer
                    example: 403
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/patient/me:
    get:
      tags:
        - Patients
      summary: "Get current authenticated patient's data"
      operationId: 8cf815959ce82f6548cc5a63033455e7
      responses:
        200:
          description: 'Successfully retrieved current patient data'
          content:
            application/json:
              schema:
                properties:
                  patient:
                    properties:
                      id:
                        type: integer
                        example: 1
                      fullName:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: patient@example.com
                      gender:
                        type: string
                        example: male
                        nullable: true
                      phoneNumber:
                        type: string
                        example: '+1234567890'
                        nullable: true
                      address:
                        type: string
                        example: '123 Main St'
                        nullable: true
                      image:
                        properties:
                          id:
                            type: integer
                            example: 1
                          image_name:
                            type: string
                            example: 'http://example.com/storage/images/patient_img/patient_1.jpg'
                        type: object
                        nullable: true
                    type: object
                  message:
                    type: string
                    example: 'Successfully retrieved current patient data'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. You are not a patient.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/favorite/toggle:
    post:
      tags:
        - Patients
      summary: 'Toggle a doctor as favorite for the authenticated patient'
      operationId: c71f281ba6097891fbae8a7a580befea
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - doctor_id
              properties:
                doctor_id:
                  description: 'ID of the doctor to add or remove from favorites'
                  type: integer
                  example: 1
              type: object
      responses:
        200:
          description: 'Doctor added or removed from favorites'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Doctor added to favorites'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can manage favorite doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/favorite/doctors:
    get:
      tags:
        - Patients
      summary: 'Get the list of favorite doctors for the authenticated patient'
      operationId: 7317aad247a548be066abe3013b908c9
      responses:
        200:
          description: 'Favorite doctors retrieved successfully or no favorite doctors found'
          content:
            application/json:
              schema:
                properties:
                  favorite_doctors:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        firstName:
                          type: string
                          example: Jane
                        lastName:
                          type: string
                          example: Smith
                        image:
                          properties:
                            id:
                              type: integer
                              example: 1
                            image_name:
                              type: string
                              example: 'http://example.com/storage/images/doctor_img/doctor_1.jpg'
                          type: object
                          nullable: true
                      type: object
                  message:
                    type: string
                    example: 'Favorite doctors retrieved successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. Only patients can view favorite doctors.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/patient-group/emergency/call:
    post:
      tags:
        - Patients
      summary: 'Retrieve emergency contact number for patients'
      operationId: 3b55c4e752ddaffcf5497684d12729ae
      responses:
        200:
          description: 'Emergency number retrieved successfully'
          content:
            application/json:
              schema:
                properties:
                  emergency_number:
                    type: string
                    example: '111'
                  message:
                    type: string
                    example: 'Emergency number retrieved successfully. Please call 111.'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Unauthorized. You are not a patient.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
  /api/reset-password/send-code:
    post:
      tags:
        - 'Password Reset'
      summary: 'Request a password reset code'
      operationId: ee514344b04db5c54bb03ec253475e8f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  description: "Patient's email address"
                  type: string
                  format: email
                  example: patient@example.com
              type: object
      responses:
        200:
          description: 'Password reset code sent successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'A password reset code has been sent to your email.'
                  status:
                    type: integer
                    example: 200
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Email is invalid or not registered.'
                  status:
                    type: integer
                    example: 422
                  errors:
                    type: object
                type: object
  /api/reset-password/resend-code:
    post:
      tags:
        - 'Password Reset'
      summary: 'Resend a password reset code'
      operationId: f246074e35b115782b954f0a1c5104d4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  description: "Patient's email address"
                  type: string
                  format: email
                  example: patient@example.com
              type: object
      responses:
        200:
          description: 'Password reset code resent successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'A password reset code has been sent to your email.'
                  status:
                    type: integer
                    example: 200
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Email is invalid or not registered.'
                  status:
                    type: integer
                    example: 422
                  errors:
                    type: object
                type: object
  /api/reset-password/reset:
    post:
      tags:
        - 'Password Reset'
      summary: 'Reset patient password using code'
      operationId: 4afe1d5a9075541b8db8f5259f6dd923
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - code
                - password
                - password_confirmation
              properties:
                email:
                  description: "Patient's email address"
                  type: string
                  format: email
                  example: patient@example.com
                code:
                  description: '6-digit reset code'
                  type: string
                  example: '123456'
                password:
                  description: 'New password (min 8 characters, must include uppercase, lowercase, number, and special character)'
                  type: string
                  example: Password123!
                password_confirmation:
                  description: 'Confirmation of the new password'
                  type: string
                  example: Password123!
              type: object
      responses:
        200:
          description: 'Password reset successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Password reset successfully.'
                  status:
                    type: integer
                    example: 200
                type: object
        422:
          description: 'Validation error or invalid/expired code'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The code is incorrect.'
                  status:
                    type: integer
                    example: 422
                  errors:
                    type: object
                    nullable: true
                type: object
  /api/users-group/users:
    get:
      tags:
        - Users
      summary: 'Get all users'
      operationId: 3de4eb7fe0e0bcbf8806b768583793d8
      responses:
        200:
          description: 'Successfully retrieved all users'
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'John Doe'
                        email:
                          type: string
                          format: email
                          example: user@example.com
                        role:
                          type: string
                          enum:
                            - owner
                            - doctors
                            - moderator
                          example: owner
                      type: object
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to perform this action'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Users
      summary: 'Create a new user'
      operationId: 328c533362f94ce831de84c659290b69
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  description: "User's name"
                  type: string
                  example: 'John Doe'
                email:
                  description: "User's email address"
                  type: string
                  format: email
                  example: user@example.com
                password:
                  description: "User's password (min 8 characters)"
                  type: string
                  example: Password123!
                role:
                  description: "User's role"
                  type: string
                  enum:
                    - owner
                    - doctors
                    - moderator
                  example: owner
              type: object
      responses:
        201:
          description: 'User created successfully'
          content:
            application/json:
              schema:
                properties:
                  user:
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      role:
                        type: string
                        example: owner
                    type: object
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to perform this action'
                  status:
                    type: integer
                    example: 403
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
  '/api/users-group/users/{user}':
    get:
      tags:
        - Users
      summary: 'Get a specific user'
      operationId: dd06c48b2c72c9c8dd146d7ecdb93ec4
      parameters:
        -
          name: user
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Successfully retrieved user'
          content:
            application/json:
              schema:
                properties:
                  user:
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      role:
                        type: string
                        example: owner
                    type: object
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to perform this action'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'User not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
    put:
      tags:
        - Users
      summary: 'Update a specific user'
      operationId: f7a2b94c3eea2bb71e04ec2fd3dcb292
      parameters:
        -
          name: user
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: "User's name"
                  type: string
                  example: 'John Doe'
                email:
                  description: "User's email address"
                  type: string
                  format: email
                  example: user@example.com
                password:
                  description: "User's new password (min 8 characters)"
                  type: string
                  example: Password123!
                role:
                  description: "User's role"
                  type: string
                  enum:
                    - owner
                    - doctors
                    - moderator
                  example: owner
              type: object
      responses:
        200:
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                properties:
                  user:
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      role:
                        type: string
                        example: owner
                    type: object
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to perform this action'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'User not found'
                  status:
                    type: integer
                    example: 404
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Users
      summary: 'Delete a specific user'
      operationId: b09055cac69d69d74ac7e415bf561d66
      parameters:
        -
          name: user
          in: path
          description: 'ID of the user'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'User deleted successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to perform this action'
                  status:
                    type: integer
                    example: 403
                type: object
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'User not found'
                  status:
                    type: integer
                    example: 404
                type: object
      security:
        -
          bearerAuth: []
  /api/users-group/user/register:
    post:
      tags:
        - 'User Authentication'
      summary: 'Register a new user'
      operationId: d9595ffd11c561980303b133a615e609
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  description: "User's name (3-50 characters, letters and spaces only)"
                  type: string
                  example: 'John Doe'
                email:
                  description: "User's email address"
                  type: string
                  format: email
                  example: user@example.com
                password:
                  description: 'Password (min 8 characters, must include uppercase, lowercase, number, and special character)'
                  type: string
                  example: Password123!
                role:
                  description: "User's role"
                  type: string
                  enum:
                    - owner
                    - doctors
                    - moderator
                  example: owner
              type: object
      responses:
        201:
          description: 'User registered successfully'
          content:
            application/json:
              schema:
                properties:
                  user:
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      role:
                        type: string
                        example: owner
                    type: object
                  message:
                    type: string
                    example: 'user registered successfully'
                  status:
                    type: integer
                    example: 201
                type: object
        422:
          description: 'Validation error'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 422
                type: object
  /api/users-group/user/login:
    post:
      tags:
        - 'User Authentication'
      summary: 'Log in a user'
      operationId: ff4d5b21aeee0563b5f651d7a362ac05
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  description: "User's email address"
                  type: string
                  format: email
                  example: user@example.com
                password:
                  description: "User's password"
                  type: string
                  example: Password123!
              type: object
      responses:
        200:
          description: 'Login successful'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  status:
                    type: integer
                    example: 200
                  token:
                    description: 'Sanctum authentication token'
                    type: string
                    example: 1|abc123xyz
                type: object
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The email is incorrect. Please verify that this email is correct.'
                  errors:
                    type: object
                  status:
                    type: integer
                    example: 401
                type: object
  /api/users-group/user/logout:
    post:
      tags:
        - 'User Authentication'
      summary: 'Log out a user'
      operationId: 9925d4e4347e095764b3a7a2707d55cd
      responses:
        200:
          description: 'User logged out successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Owner logged out successfully'
                  status:
                    type: integer
                    example: 200
                type: object
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  status:
                    type: integer
                    example: 401
                type: object
        403:
          description: 'Unauthorized action'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to logout here.'
                  status:
                    type: integer
                    example: 403
                type: object
      security:
        -
          bearerAuth: []
components:
  schemas:
    DoctorSchedule:
      properties:
        Monday:
          type: array
          items:
            type: string
            example: '10:00 AM, 1:00PM, 4:00PM'
        Tuesday:
          type: array
          items:
            type: string
            example: '9:00 AM, 1:00PM, 4:00PM'
      type: object
tags:
  -
    name: Appointments
    description: Appointments
  -
    name: 'Doctor Authentication'
    description: 'Doctor Authentication'
  -
    name: Doctors
    description: Doctors
  -
    name: 'Search For A Doctor'
    description: 'Search For A Doctor'
  -
    name: 'Medical Test Appointments'
    description: 'Medical Test Appointments'
  -
    name: 'Medical Tests'
    description: 'Medical Tests'
  -
    name: 'Medical Test Results'
    description: 'Medical Test Results'
  -
    name: 'Search For Medical Tests'
    description: 'Search For Medical Tests'
  -
    name: 'Patient Authentication'
    description: 'Patient Authentication'
  -
    name: Patients
    description: Patients
  -
    name: 'Password Reset'
    description: 'Password Reset'
  -
    name: Users
    description: Users
  -
    name: 'User Authentication'
    description: 'User Authentication'
